utils:::menuInstallPkgs()
load(KernSmooth)
require(KernSmooth)
q()
install.packages(c("gdata", "gtools"))
require(gtools)
require(gdata)
a=list(1)
length(a)
a[[2]]=3
length(a)
library(manipulate)
pvals <- seq(0.01, 0.99, length = 1000)
manipulate(
plot(pvals, dbeta(pvals, alpha, beta), type = "l", lwd = 3, frame = FALSE),
alpha = slider(0.01, 10, initial = 1, step = .5),
beta = slider(0.01, 10, initial = 1, step = .5)
)
?mtcars
library(manipulate)
manipulate(plot(1:x), x = slider(1,
100))
manipulate(plot(1:x), x = slider(1,100))
library(manipulate)
library(usingR)
data(Galton)
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(usingR)
data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(MASS)
data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(MASS)
data(Galton)
myHist <- function(mu){
hist(Galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
library(manipulate)
library(UsingR)
data(galton)
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
manipulate(myHist(mu), mu = slider(62, 74))
manipulate(myHist(mu), mu = slider(62, 74, 0.5))
manipulate(myHist(mu), mu = slider(62, 74, 0.5))
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
myHist <- function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu, mu), c(0, 150),col="red",lwd=5)
mse <- mean((galton$child - mu)^2)
text(63, 150, paste("mu = ", mu))
text(63, 140, paste("MSE = ", round(mse, 2)))
}
manipulate(myHist(mu), mu = slider(62, 74, step = 0.5))
require(rCharts)
installPackages("rCharts")
install.packages("rCharts")
require(devtools)
install_github("ramnathv/rCharts@dev")
require(rtools)
install.packages(rtools)
install.packages("rtools")
install.packages("base64enc")
install_github("ramnathv/rCharts@dev")
require(rCharts)
haireye = as.data.frame(HairEyeColor)
n1 = nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex == "Male"))
n1$save("fig/n1.html", cdn = TRUE);
cat('<iframe src="fig/n1.html" width=100%, height=600></iframe>')
n1
n1$html
n1$html()
nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex == "Male"))
EyeHairColor
HairEyeColor
nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex = "Male"))
nPlot(Freq ~ Hair, group = "Eye", type = "multiBarChart", data = subset(haireye, Sex == "Male"))
iris
names(iris) = gsub("\\.", "", names(iris));
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = "Species", type = "point")
?abline
library(dev.tools)
library(devtools)
library(slidyfy)
library(slidify)
install.packges("slidify")
install.packages("slidify")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
?str
?summary
getwd()
setwd("~\Desktop\CSE_training")
setwd("~/Desktop/CSE_training")
?gsub
?as.Date
as.Date
library(ggplot2)
?ggmap
?qmplot
install.packages("ggmap")
install.packges("maps")
install.packages("maps")
library(maps)
install.packages("maps")
install.packages("maps")
n = 10000;
c = 1.3;
w1 = (c^(n+1)-c^n)/(c-1);
w2 = c^n;
n = 100;
c = 1.3;
w1 = (c^(n+1)-c^n)/(c-1);
w2 = c^n;
data(mtcars)
mtcars
a = matrix(runif(20), ncol = 4, nrow = 6);
a
?mtcars
?kmeans
data(iris)
names(iris)
?sample
?ctree()
?ctree
install.packages("party")
library(party)
?ctree
?kmeans
data(iris)
names(iris)
setwd("C:/Users/David/Desktop/CSE_training/Intro to R 2")
library(rmarkdown)
render("CapstoneProject.Rmd", "pdf_document")
?boxplot
library(party);
set.seed(3333)
index <- sample(2, nrow(iris), prob=c(0.7, 0.3), replace=TRUE)
train <- iris[index==1,]
test <- iris[index==2,]
predict_iris <- ctree(data=trainData, Species ~.);
print(predict_iris);
plot(predict_iris);
# Do the prediction on test set and compare results with real labels
prediction <- predict(predict_iris, newdata=test);
table(prediction, test$Species);
num_of_clusters <- 3;
newiris <- iris[1:4,];
kmean <- kmeans(newiris, num_of_clusters);
table(kmean$cluster, iris$Species);
iris2<-iris
iris2$Species <- NULL
ww = kmeans(iris2, 3)
ww$cluster
getwd()
render("CapstoneProject.Rmd", "pdf_document")
render("CapstoneProject.Rmd", "pdf_document")
?lm
?anova
?update
library(rmarkdown)
setwd("C:/Users/David/Desktop/CSE_training/Intro to R 2")
render("IntroductionR2.Rmd", "pdf_document")
render("IntroductionR2.Rmd", "pdf_document")
render("CapstoneProject.Rmd", "pdf_document")
render("IntroductionR2.Rmd", "markdown_document")
render("IntroductionR2.Rmd", "md_document")
